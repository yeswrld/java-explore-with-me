{
  "info": {
    "_postman_id": "05310b88-1975-493d-a8d9-839b34738d08",
    "name": "feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "40016232"
  },
  "item": [
    {
      "name": "Добавление трех новых пользователей",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const rnd = new RandomUtils(); // Убедитесь, что RandomUtils доступен\r",
              "let users = [];\r",
              "\r",
              "// Генерируем 3 пользователей\r",
              "for (let i = 0; i < 3; i++) {\r",
              "    try {\r",
              "        const user = rnd.getUser();\r",
              "        users.push(user);\r",
              "    } catch (err) {\r",
              "        console.error(`Ошибка при генерации пользователя #${i + 1}:`, err);\r",
              "    }\r",
              "}\r",
              "\r",
              "// Функция для выполнения запроса и проверки\r",
              "function sendUser(user, index) {\r",
              "    return new Promise((resolve, reject) => {\r",
              "        pm.sendRequest({\r",
              "            url: pm.request.url.toString(), // Текущий URL\r",
              "            method: 'POST',\r",
              "            header: {\r",
              "                'Content-Type': 'application/json'\r",
              "            },\r",
              "            body: {\r",
              "                mode: 'raw',\r",
              "                raw: JSON.stringify(user)\r",
              "            }\r",
              "        }, function (err, res) {\r",
              "            if (err) {\r",
              "                console.error(`Ошибка при отправке пользователя #${index + 1}:`, err);\r",
              "                return reject(err);\r",
              "            }\r",
              "\r",
              "            // Проверка статуса и формата\r",
              "            pm.test(`[${index + 1}] Статус ответа должен быть 201`, function () {\r",
              "                pm.expect(res.code).to.equal(201);\r",
              "                pm.expect(res).to.have.jsonBody();\r",
              "            });\r",
              "\r",
              "            const responseUser = res.json();\r",
              "\r",
              "            // Проверка наличия полей\r",
              "            pm.test(`[${index + 1}] Ответ должен содержать id, name, email`, function () {\r",
              "                pm.expect(responseUser).to.have.property('id');\r",
              "                pm.expect(responseUser).to.have.property('name');\r",
              "                pm.expect(responseUser).to.have.property('email');\r",
              "            });\r",
              "\r",
              "            // Проверка совпадения данных\r",
              "            pm.test(`[${index + 1}] Данные должны совпадать с отправленными`, function () {\r",
              "                pm.expect(responseUser.id).to.not.be.null;\r",
              "                pm.expect(responseUser.name).to.equal(user.name, `Имя пользователя #${index + 1} не совпадает`);\r",
              "                pm.expect(responseUser.email).to.equal(user.email, `Email пользователя #${index + 1} не совпадает`);\r",
              "            });\r",
              "\r",
              "            resolve();\r",
              "        });\r",
              "    });\r",
              "}\r",
              "\r",
              "// Последовательно отправляем всех пользователей\r",
              "(async () => {\r",
              "    for (let i = 0; i < users.length; i++) {\r",
              "        await sendUser(users[i], i);\r",
              "    }\r",
              "})();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/users",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление первого эвента",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    let event;\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id)\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        event = rnd.getEvent(category.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(event),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('title');\r",
              "pm.expect(target).to.have.property('annotation');\r",
              "pm.expect(target).to.have.property('category');\r",
              "pm.expect(target).to.have.property('paid');\r",
              "pm.expect(target).to.have.property('eventDate');\r",
              "pm.expect(target).to.have.property('initiator');\r",
              "pm.expect(target).to.have.property('description');\r",
              "pm.expect(target).to.have.property('participantLimit');\r",
              "pm.expect(target).to.have.property('state');\r",
              "pm.expect(target).to.have.property('createdOn');\r",
              "pm.expect(target).to.have.property('location');\r",
              "pm.expect(target).to.have.property('requestModeration');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
              "    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
              "    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
              "    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
              "    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
              "    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
              "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
              "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
              "    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            }
          ]
        },
        "description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
      },
      "response": []
    },
    {
      "name": "Добавление второго эвента",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    let event;\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id)\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        event = rnd.getEvent(category.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(event),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('title');\r",
              "pm.expect(target).to.have.property('annotation');\r",
              "pm.expect(target).to.have.property('category');\r",
              "pm.expect(target).to.have.property('paid');\r",
              "pm.expect(target).to.have.property('eventDate');\r",
              "pm.expect(target).to.have.property('initiator');\r",
              "pm.expect(target).to.have.property('description');\r",
              "pm.expect(target).to.have.property('participantLimit');\r",
              "pm.expect(target).to.have.property('state');\r",
              "pm.expect(target).to.have.property('createdOn');\r",
              "pm.expect(target).to.have.property('location');\r",
              "pm.expect(target).to.have.property('requestModeration');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
              "    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
              "    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
              "    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
              "    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
              "    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
              "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
              "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
              "    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            }
          ]
        },
        "description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
      },
      "response": []
    },
    {
      "name": "Добавление нового комментария пользователем 1",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Статус ответа должен быть 201\", function () {\r",
              "  pm.response.to.have.status(201);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать все необходимые поля: id, text, user, created, updated\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    // Проверяем наличие основных полей\r",
              "    pm.expect(response).to.include.all.keys('id', 'text', 'user', 'created', 'updated');\r",
              "\r",
              "    // Проверяем, что user — это объект и он содержит свои ключи\r",
              "    pm.expect(response.user).to.be.an('object');\r",
              "    pm.expect(response.user).to.include.all.keys('id', 'name');\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"eventId\": \"1\",\r\n    \"text\": \"Text one\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/1/comments",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "1",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление нового комментария пользователем 1 к эвенту 2",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Статус ответа должен быть 201\", function () {\r",
              "  pm.response.to.have.status(201);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать все необходимые поля: id, text, user, created, updated\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    // Проверяем наличие основных полей\r",
              "    pm.expect(response).to.include.all.keys('id', 'text', 'user', 'created', 'updated');\r",
              "\r",
              "    // Проверяем, что user — это объект и он содержит свои ключи\r",
              "    pm.expect(response.user).to.be.an('object');\r",
              "    pm.expect(response.user).to.include.all.keys('id', 'name');\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"eventId\": \"2\",\r\n    \"text\": \"Text one\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/1/comments",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "1",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление нового комментария пользователем 2",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Статус ответа должен быть 201\", function () {\r",
              "  pm.response.to.have.status(201);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать все необходимые поля: id, text, user, created, updated\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    // Проверяем наличие основных полей\r",
              "    pm.expect(response).to.include.all.keys('id', 'text', 'user', 'created', 'updated');\r",
              "\r",
              "    // Проверяем, что user — это объект и он содержит свои ключи\r",
              "    pm.expect(response.user).to.be.an('object');\r",
              "    pm.expect(response.user).to.include.all.keys('id', 'name');\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"eventId\": \"1\",\r\n    \"text\": \"Text one\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/2/comments",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "2",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Подтверждение статуса 1 эвента",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200\", function () {\r",
              "  pm.response.to.have.status(200);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/events/2",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            "2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление нового пустого комментария пользователем 1",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Статус ответа должен быть 400\", function () {\r",
              "  pm.response.to.have.status(400);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать все необходимые поля: timestamp, status, reason, message\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    // Проверяем наличие основных полей\r",
              "    pm.expect(response).to.include.all.keys('timestamp', 'status', 'reason', 'message');\r",
              "});\r",
              "pm.test(\"Поле 'reason' содержит ожидаемый текст =  Ошибка валидации\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    pm.expect(response.reason).to.equal(\r",
              "        \"Ошибка валидации\",\r",
              "        \"Сообщение об ошибке не совпадает с ожидаемым\"\r",
              "    );\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"eventId\": \"1\",\r\n    \"text\": \"\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/1/comments",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "1",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление нового комментария несуществующим пользователем",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Статус ответа должен быть 404\", function () {\r",
              "  pm.response.to.have.status(404);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать все необходимые поля: timestamp, status, reason, message\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    // Проверяем наличие основных полей\r",
              "    pm.expect(response).to.include.all.keys('timestamp', 'status', 'reason', 'message');\r",
              "});\r",
              "pm.test(\"Поле 'message' содержит ожидаемый текст =  Пользователь с ИД = 9999 не найден\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    pm.expect(response.message).to.equal(\r",
              "        \"Пользователь с ИД = 9999 не найден\",\r",
              "        \"Сообщение об ошибке не совпадает с ожидаемым\"\r",
              "    );\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"eventId\": \"1\",\r\n    \"text\": \"Text one\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/9999/comments",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "9999",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление нового комментария к несуществующему эвенту",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Статус ответа должен быть 404\", function () {\r",
              "  pm.response.to.have.status(404);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать все необходимые поля: timestamp, status, reason, message\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    // Проверяем наличие основных полей\r",
              "    pm.expect(response).to.include.all.keys('timestamp', 'status', 'reason', 'message');\r",
              "});\r",
              "pm.test(\"Поле 'message' содержит ожидаемый текст =  Эвент с ИД = 8888 не найден\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    pm.expect(response.message).to.equal(\r",
              "        \"Эвент с ИД = 8888 не найден\",\r",
              "        \"Сообщение об ошибке не совпадает с ожидаемым\"\r",
              "    );\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"eventId\": \"8888\",\r\n    \"text\": \"Text one\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/1/comments",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "1",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление текста комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Статус ответа должен быть 200\", function () {\r",
              "  pm.response.to.have.status(200);\r",
              "});\r",
              "pm.test(\"Текст должен был обновлен до = Новый текст комментария\", function () {\r",
              "    pm.expect(pm.response.json().text).to.eql(\"Новый текст комментария\");\r",
              "});\r",
              "pm.test(\"Ответ должен содержать все необходимые поля: id, text, user, created, updated\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    // Проверяем наличие основных полей\r",
              "    pm.expect(response).to.include.all.keys('id', 'text', 'user', 'created', 'updated');\r",
              "\r",
              "    // Проверяем, что user — это объект и он содержит свои ключи\r",
              "    pm.expect(response.user).to.be.an('object');\r",
              "    pm.expect(response.user).to.include.all.keys('id', 'name');\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"eventId\": \"1\",\r\n    \"text\": \"Новый текст комментария\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/1/comments/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "1",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление текста не существующего комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Статус ответа должен быть 404\", function () {\r",
              "  pm.response.to.have.status(404);\r",
              "});\r",
              "pm.test(\"Ответ должен содержать все необходимые поля: timestamp, status, reason, message\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    // Проверяем наличие основных полей\r",
              "    pm.expect(response).to.include.all.keys('timestamp', 'status', 'reason', 'message');\r",
              "});\r",
              "pm.test(\"Поле 'message' содержит ожидаемый текст =  Коммент с ИД = 99 не найден\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    pm.expect(response.message).to.equal(\r",
              "        \"Коммент с ИД = 99 не найден\",\r",
              "        \"Сообщение об ошибке не совпадает с ожидаемым\"\r",
              "    );\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"eventId\": \"8899898\",\r\n    \"text\": \"Новый текст комментария\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/1/comments/99",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "1",
            "comments",
            "99"
          ]
        }
      },
      "response": []
    },
    {
      "name": "изменение Админом статуса комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Verify the State field of the object is set to PUBLISHED\", function () {\r",
              "    pm.expect(pm.response.json().state).to.eql(\"PUBLISHED\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"state\": \"PUBLISHED\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/comments/2",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "comments",
            "2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение Админом списка комментариев пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Кол-во коментариев должно быть 2\", function () {\r",
              "    pm.expect(pm.response.json()).to.be.an('array');\r",
              "    pm.expect(pm.response.json()).to.have.lengthOf(2);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/admin/comments/users/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "comments",
            "users",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление админом комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "    pm.test(\"Status code is 204\", function () {\r",
              "        pm.response.to.have.status(204);\r",
              "    });"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/admin/comments/3",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "comments",
            "3"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение списка комментариев для всех",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Verify the response is a list\", function () {\r",
              "    pm.expect(pm.response.json()).to.be.an('array');\r",
              "});\r",
              "\r",
              "pm.test(\"Verify the first object has the required fields\", function () {\r",
              "    pm.expect(pm.response.json()[0]).to.have.property('id');\r",
              "    pm.expect(pm.response.json()[0]).to.have.property('text');\r",
              "    pm.expect(pm.response.json()[0]).to.have.property('user');\r",
              "    pm.expect(pm.response.json()[0]).to.have.property('created');\r",
              "    pm.expect(pm.response.json()[0]).to.have.property('updated');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/comments/events/2",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "events",
            "2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение коментария неавторизованным",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Код ответа должен быть 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"Ответ должен содержать все необходимые поля: id, text, user, created, updated\", function () {\r",
              "    const response = pm.response.json();\r",
              "\r",
              "    pm.expect(response).to.include.all.keys('id', 'text', 'user', 'created', 'updated');\r",
              "\r",
              "    pm.expect(response.user).to.be.an('object');\r",
              "    pm.expect(response.user).to.include.all.keys('id', 'name');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/comments/2",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "2"
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "API = class {\r",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
          "        this.baseUrl = baseUrl;\r",
          "        this.pm = postman;\r",
          "        this._verbose = verbose;\r",
          "    }\r",
          "\r",
          "    async addUser(user, verbose=null) {\r",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addCategory(category, verbose=null) {\r",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addEvent(userId, event, verbose=null) {\r",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addCompilation(compilation, verbose=null) {\r",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
          "    }\r",
          "\r",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
          "    }\r",
          "\r",
          "    async publishEvent(eventId, verbose=null) {\r",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
          "    }\r",
          "    \r",
          "    async rejectEvent(eventId, verbose=null) {\r",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
          "    }\r",
          "\r",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
          "    }\r",
          "\r",
          "    async findCategory(catId, verbose=null) {\r",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findCompilation(compId, verbose=null) {\r",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findEvent(eventId, verbose=null) {\r",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findUser(userId, verbose=null) {\r",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
          "    }\r",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
          "        return new Promise((resolve, reject) => {\r",
          "            verbose = verbose == null ? this._verbose : verbose;\r",
          "            const request = {\r",
          "                url: this.baseUrl + path,\r",
          "                method: method,\r",
          "                body: body == null ? \"\" : JSON.stringify(body),\r",
          "                header: { \"Content-Type\": \"application/json\" },\r",
          "            };\r",
          "            if(verbose) {\r",
          "                console.log(\"Отправляю запрос: \", request);\r",
          "            }\r",
          "\r",
          "            try {\r",
          "                this.pm.sendRequest(request, (error, response) => {\r",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
          "                        let err = error ? error : JSON.stringify(response.json());\r",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
          "\r",
          "                        reject(new Error(errorText + err));\r",
          "                    }\r",
          "                    if(verbose) {\r",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
          "                    }\r",
          "                    if (response.stream.length === 0){\r",
          "                        reject(new Error('Отправлено пустое тело ответа'))\r",
          "                    }else{\r",
          "                        resolve(response.json());\r",
          "                    }\r",
          "                });\r",
          "                \r",
          "            } catch(err) {\r",
          "                if(verbose) {\r",
          "                    console.error(errorText, err);\r",
          "                }\r",
          "                return Promise.reject(err);\r",
          "            }\r",
          "        });\r",
          "    }\r",
          "};\r",
          "\r",
          "RandomUtils = class {\r",
          "    constructor() {}\r",
          "\r",
          "    getUser() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getCategory() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getEvent(categoryId) {\r",
          "        return {\r",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
          "            category: categoryId,\r",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
          "            eventDate: this.getFutureDateTime(),\r",
          "            location: {\r",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
          "            },\r",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
          "        }\r",
          "    }\r",
          "\r",
          "    getCompilation(...eventIds) {\r",
          "        return {\r",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            events: eventIds\r",
          "        };\r",
          "    }\r",
          "\r",
          "\r",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
          "        let moment = require('moment');\r",
          "\r",
          "        let m = moment();\r",
          "        m.add(hourShift, 'hour');\r",
          "        m.add(minuteShift, 'minute');\r",
          "        m.add(yearShift, 'year');\r",
          "\r",
          "        return m.format('YYYY-MM-DD HH:mm:ss');\r",
          "    }\r",
          "\r",
          "    getWord(length = 1) {\r",
          "        let result = '';\r",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
          "        const charactersLength = characters.length;\r",
          "        let counter = 0;\r",
          "        while (counter < length) {\r",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
          "            counter += 1;\r",
          "        }\r",
          "        return result;\r",
          "    }\r",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "uid",
      "value": "1",
      "type": "string"
    }
  ]
}